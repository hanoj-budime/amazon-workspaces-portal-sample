AWSTemplateFormatVersion: 2010-09-09

Description: >
  Template for the parts of the Workspaces portal that can be automated.

Parameters:
  ClientName:
    Type: String
    Description: Name of the customer to help identify resources
    Default: aws-samples
  EnvironmentName:
    Type: String
    Description: Name of the environment to help identify resources
    Default: test-113
  ServiceName:
    Type: String
    Description: Name of the service to help identify resources
    Default: workspaces-portal
  S3CodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code
    Default: xcafockufhle

Outputs:
  APIGatewayId:
    Value: !Ref APIGateway
  CognitoUserPoolId:
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Value: !Ref UserPoolAppClient

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ClientName}-${ServiceName}-${EnvironmentName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      WebsiteConfiguration:
        IndexDocument: index.html

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Principal: "*"
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ClientName}-${ServiceName}-${EnvironmentName}
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Effect: Allow
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}
        - PolicyName: WorkspacesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - workspaces:DescribeWorkspaces
                  - workspaces:RebootWorkspaces
                  - workspaces:RebuildWorkspaces
                  - workspaces:TerminateWorkspaces
                  - workspaces:DescribeWorkspaceDirectories
                  - workspaces:StopWorkspaces
                  - workspaces:StartWorkspaces
                  - workspaces:DescribeWorkspacesConnectionStatus
                Effect: Allow
                Resource: "*"
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:DescribeRegions
                Effect: Allow
                Resource: "*"

  LambdaFunctionFindInstances:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub ${ClientName}-${ServiceName}-findinstances-${EnvironmentName}
      Code:
        S3Bucket: !Sub ${S3CodeBucket}-${AWS::Region}
        S3Key: lambda_workspaces_import.zip
      Description: Workspaces portal function to find all Workspaces instances in all applicable regions.
      Handler: lambda_workspaces_import.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.13
      Timeout: 300
      Environment:
        Variables:
          DynamoDBTableName: !Ref DynamoDBTable

  LambdaFunctionPortalActions:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub ${ClientName}-${ServiceName}-actions-${EnvironmentName}
      Code:
        S3Bucket: !Sub ${S3CodeBucket}-${AWS::Region}
        S3Key: lambda_workspaces_actions.zip
      Description: Workspaces portal function to perform actions as called by API Gateway.
      Handler: lambda_workspaces_actions.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          DynamoDBTableName: !Ref DynamoDBTable

  LambdaFunctionListInstances:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub ${ClientName}-${ServiceName}-listinstances-${EnvironmentName}
      Code:
        S3Bucket: !Sub ${S3CodeBucket}-${AWS::Region}
        S3Key: lambda_workspaces_list_instances.zip
      Description: Workspaces portal function to return a list of Workspaces instances when called by API Gateway.
      Handler: lambda_workspaces_list_instances.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          DynamoDBTableName: !Ref DynamoDBTable

  LambdaFunctionPortalReaper:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub ${ClientName}-${ServiceName}-reaper-${EnvironmentName}
      Code:
        S3Bucket: !Sub ${S3CodeBucket}-${AWS::Region}
        S3Key: lambda_workspaces_reaper.zip
      Description: Workspaces portal function to remove deleted Workspaces instances from the DynamoDB table.
      Handler: lambda_workspaces_reaper.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.13
      Timeout: 300
      Environment:
        Variables:
          DynamoDBTableName: !Ref DynamoDBTable

  LambdaListPermission:
    Type: AWS::Lambda::Permission
    DependsOn: APIGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunctionListInstances.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*

  LambdaActionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: APIGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunctionPortalActions.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*

  DiscoverEvent:
    Type: AWS::Events::Rule
    DependsOn: LambdaFunctionFindInstances
    Properties:
      Name: !Sub ${ClientName}-${ServiceName}-Discovery-${EnvironmentName}
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunctionFindInstances.Arn
          Id: InstanceDiscovery

  DiscoverEventPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LambdaFunctionFindInstances
      - DiscoverEvent
    Properties:
      FunctionName: !Ref LambdaFunctionFindInstances
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DiscoverEvent.Arn

  ReaperEvent:
    Type: AWS::Events::Rule
    DependsOn: LambdaFunctionPortalReaper
    Properties:
      Name: !Sub ${ClientName}-${ServiceName}-Reaper-${EnvironmentName}
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunctionPortalReaper.Arn
          Id: InstanceReaper

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ClientName}-${ServiceName}-${EnvironmentName}
      Schema:
        - AttributeDataType: String
          Name: custom:ADGroups
          Mutable: true

  UserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${ClientName}-${ServiceName}-${EnvironmentName}
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      ReadAttributes:
        - custom:ADGroups
      WriteAttributes:
        - custom:ADGroups

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ClientName}-${ServiceName}-${EnvironmentName}
      FailOnWarnings: true

  APIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      RestApiId: !Ref APIGateway
      DeploymentId: !Ref APIGatewayDeployment
      MethodSettings:
        - ResourcePath: /admin
          HttpMethod: GET
          DataTraceEnabled: true
        - ResourcePath: /user
          HttpMethod: GET
          DataTraceEnabled: true

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGateway
      - APIGWMethodAdmin
      - APIGWMethodUser
      - APIGWOptionsMethodAdmin
      - APIGWOptionsMethodUser
    Properties:
      RestApiId: !Ref APIGateway

  APIGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref APIGateway
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPool
      ProviderARNs:
        - !GetAtt UserPool.Arn
      Type: COGNITO_USER_POOLS

  APIGatewayResourceAdmin:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: admin

  APIGWMethodAdmin:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaRole
    Properties:
      ResourceId: !Ref APIGatewayResourceAdmin
      RestApiId: !Ref APIGateway
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref APIGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionPortalActions.Arn}/invocations
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  APIGWOptionsMethodAdmin:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref APIGatewayResourceAdmin
      RestApiId: !Ref APIGateway
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: "{'statusCode': 200}"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  APIGatewayResourceUser:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: user

  APIGWMethodUser:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaRole
    Properties:
      ResourceId: !Ref APIGatewayResourceUser
      RestApiId: !Ref APIGateway
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref APIGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionListInstances.Arn}/invocations
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  APIGWOptionsMethodUser:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref APIGatewayResourceUser
      RestApiId: !Ref APIGateway
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: "{'statusCode': 200}"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true